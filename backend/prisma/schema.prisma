// Prisma schema for backend

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  role          String         @default("CLIENT")
  isVerified    Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
  provider      Provider?
  clientBookings   Booking[] @relation("clientBookings")
  providerBookings Booking[] @relation("providerBookings")
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  reviews          Review[]
  favorites        Favorite[]
  notifications    Notification[]
  smsMessages      SmsMessage[]
  phone         String?
  phoneVerified Boolean  @default(false)
  smsOptIn      Boolean  @default(false)
  preferredLang String?
}

model Subscription {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  type      String    @default("CLUB_PRO")
  status    String    @default("PENDING")
  startDate DateTime?
  endDate   DateTime?
  price     Int       @default(50)
  autoRenew Boolean   @default(true)
  stripeId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId, status])
}

model Provider {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id])
  bio          String?
  specialties  String?
  experience   Int?
  hourlyRate   Int?
  rating       Float    @default(0)
  reviewCount  Int      @default(0)
  isVerified   Boolean  @default(false)
  isOnline     Boolean  @default(false)
  availability String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  services     Service[]
  favorites    Favorite[]

  @@index([userId], map: "idx_provider_user")
}

model Service {
  id            Int      @id @default(autoincrement())
  providerId    Int
  provider      Provider @relation(fields: [providerId], references: [id])
  name          String
  nameAr        String?
  description   String?
  descriptionAr String?
  category      String
  icon          String?
  basePrice     Int      @default(0)
  isPopular     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  bookings      Booking[]

  @@index([providerId, category], map: "idx_service_provider_category")
}

model Booking {
  id              Int            @id @default(autoincrement())
  clientId        Int
  providerId      Int
  serviceId       Int
  title           String
  description     String
  scheduledDay    String
  proposedDay     String?
  agreedStartTime String?
  price           Int            @default(0)
  status          String         @default("PENDING")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  client   User    @relation("clientBookings", fields: [clientId], references: [id])
  provider User    @relation("providerBookings", fields: [providerId], references: [id])
  service  Service @relation(fields: [serviceId], references: [id])

  messages Message[]
  reviews  Review[]

  @@index([clientId, status], map: "idx_booking_client_status")
  @@index([providerId, status], map: "idx_booking_provider_status")
  @@index([scheduledDay], map: "idx_booking_scheduledDay")
}

model Message {
  id         Int       @id @default(autoincrement())
  bookingId  Int?
  senderId   Int
  receiverId Int
  content    String
  isSystem   Boolean   @default(false)
  isRead     Boolean   @default(false)
  // Pi√®ces jointes (optionnelles)
  fileUrl    String?
  fileType   String?
  fileSize   Int?
  createdAt  DateTime  @default(now())

  booking    Booking?  @relation(fields: [bookingId], references: [id])
  sender     User      @relation("MessageSender", fields: [senderId], references: [id])
  receiver   User      @relation("MessageReceiver", fields: [receiverId], references: [id])

  @@index([bookingId])
  @@index([senderId, receiverId, createdAt])
  @@index([receiverId, isRead, createdAt])
}

model Review {
  id         Int      @id @default(autoincrement())
  bookingId  Int
  userId     Int
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  booking    Booking  @relation(fields: [bookingId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([bookingId, userId], map: "uniq_review_booking_user")
  @@index([userId])
}

model Favorite {
  id         Int      @id @default(autoincrement())
  userId     Int
  providerId Int
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  provider Provider @relation(fields: [providerId], references: [id])

  @@unique([userId, providerId], name: "uniq_user_provider_fav")
  @@index([userId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  title     String
  message   String
  data      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, isRead, createdAt], map: "idx_notif_user_read_date")
}

model SmsMessage {
  id                Int       @id @default(autoincrement())
  userId            Int
  bookingId         Int?
  type              String
  to                String
  body              String
  provider          String?
  providerMessageId String?
  status            String     @default("QUEUED")
  errorCode         String?
  errorMessage      String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  user              User       @relation(fields: [userId], references: [id])

  @@index([userId, createdAt], map: "idx_sms_user_date")
  @@unique([userId, bookingId, type], map: "uniq_sms_once_per_event")
}
