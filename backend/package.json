{
  "name": "backend",
  "version": "1.0.0",
  "type": "commonjs",
  "main": "dist/server.js",
  "scripts": {
    "preinstall": "node -e \"console.log('npm registry:', process.env.npm_config_registry||'default')\"",
    "postinstall": "node -e \"try{require('fs').statSync('node_modules/@prisma/client')}catch(e){}\" && npx prisma generate || true",
    "prisma:self-heal": "node scripts/prisma/self-heal.js",
    "prisma:prepare:test": "node scripts/prisma/prepare-test-db.js",
    "predev": "npm run prisma:self-heal",
    "dev": "node scripts/run/dev.cjs",
    "dev:force-online": "node -e \"process.env.FORCE_ONLINE='true'; require('./scripts/run-dev')\"",
    "prestart": "npm run prisma:self-heal",
    "start": "node dist/server/index.js || node dist/server.js",
    "start:prod": "node dist/server.js",
    "build": "tsc -p tsconfig.json",
    "run:env": "node scripts/run-with-env.js",
    "db:status": "npx prisma migrate status",
    "db:migrate": "npx prisma migrate dev --name init",
    "db:push": "npx prisma db push",
    "db:init": "node scripts/prisma/init.cjs",
    "db:migrate:prod": "prisma migrate deploy",
    "db:seed:prod": "node scripts/prisma/seed-prod.cjs",
    "db:seed": "npm run seed",
    "db:generate": "npx prisma generate",
    "db:studio": "npx prisma studio",
    "db:test:reset": "prisma db push --force-reset --accept-data-loss",
    "db:bootstrap:pg": "node scripts/db-bootstrap-pg.js",
    "db:bootstrap:sqlite": "node scripts/db-bootstrap-sqlite.js",
    "db:seed:sql": "node scripts/db-seed-sql.js",
    "test:prepare": "node scripts/test-db-prepare.js",
    "pretest": "node scripts/prisma/self-heal.js && node scripts/prisma/prepare-test-db.js",
    "test": "npm run test:smart",
    "test:smart": "node scripts/test/smart-runner.js",
    "test:ci": "node -e \"process.env.NODE_ENV='test'; process.env.OFFLINE_SKIP_TESTS='false'; require('child_process').spawn('npx', ['jest','--ci','--runInBand'], {stdio:'inherit', shell:true}).on('exit', c=>process.exit(c||0))\"",
    "test:watch": "jest --watch",
    "e2e:clubpro:curl": "node scripts/print-e2e-curls.js",
    "demo:e2e:curls": "node scripts/print-e2e-curls.js",
    "test:cov": "jest --coverage",
    "admin:create": "ts-node scripts/create-admin.ts",
    "demo:provision": "node scripts/demo-guard.js && node --loader ts-node/esm scripts/demo-provision.ts || node scripts/demo-provision.js",
    "demo:purge": "node scripts/demo-guard.js && node --loader ts-node/esm scripts/demo-purge.ts || node scripts/demo-purge.js",
    "demo:tokens": "node scripts/demo-guard.js && node scripts/demo-tokens.mjs",
    "vault:check": "ts-node scripts/check-vault.ts",
    "kyc:retention:run": "ts-node scripts/run-kyc-retention.ts",
    "smoke:webhooks": "node scripts/smoke/run.js scripts/smoke/webhooks.js",
    "smoke:webhook-idem": "node scripts/smoke/webhook-idem.cjs",
    "smoke:search": "node scripts/smoke/run.js scripts/smoke/search.js",
    "smoke:pii": "node scripts/smoke/run.js scripts/smoke/pii.js",
    "smoke:metrics": "node scripts/smoke/run.js scripts/smoke/metrics.js",
    "smoke:prefs": "node scripts/smoke/run.js scripts/smoke/notif_prefs.js",
    "smoke:subs": "node scripts/smoke/run.js scripts/smoke/subscriptions.js",
    "smoke:i18n": "node scripts/smoke/run.js scripts/smoke/i18n.js",
    "smoke:cache": "node scripts/smoke/cache.invalidate.smoke.cjs",
    "smoke:upload": "node scripts/smoke/upload.normalize.smoke.cjs",
    "smoke:all": "npm run smoke:webhooks && npm run smoke:search && npm run smoke:pii && npm run smoke:metrics && npm run smoke:prefs && npm run smoke:subs && npm run smoke:i18n && npm run smoke:cache || true",
    "smoke:all:strict": "npm run smoke:webhooks && npm run smoke:search && npm run smoke:pii && npm run smoke:metrics && npm run smoke:prefs && npm run smoke:subs && npm run smoke:i18n && npm run smoke:cache",
    "test:spawn:api": "node scripts/ops/spawn.cjs --env ./.env.online.staging --wait /health --timeout 30000",
    "test:wait:api": "node scripts/ops/wait.cjs --url $BACKEND_BASE_URL/health --timeout 30000",
    "test:online": "node scripts/env/load.js ./.env.online.staging ./.env.tokens.staging -- npm run test:smart",
    "test:online:with-spawn": "npm run test:spawn:api && npm run test:online && node scripts/ops/kill.cjs",
    "ops:wait": "node scripts/ops/wait-backend.js",
    "ops:verify": "node ../scripts/ops/verify.js",
    "ops:spawn": "node scripts/ops/spawn-backend.js",
    "ops:kill": "node scripts/ops/kill-backend.js",
    "ops:health:local": "node scripts/ops/health-local.cjs",
    "ops:csp-cors": "node scripts/ops/csp-cors.check.js",
    "ops:av-selftest": "node scripts/ops/av-selftest.cjs",
    "ops:dns:check": "node scripts/ops/dns.check.cjs",
    "ops:tls:check": "node scripts/ops/tls.check.cjs",
    "ops:proxy:check": "node scripts/env/load.js ./.env.online.staging -- node scripts/ops/proxy.check.cjs",
    "ops:webhooks:verify": "node scripts/env/load.js ./.env.online.staging ./.env.tokens.staging -- node scripts/ops/webhooks.verify.cjs",
    "ops:restore:dryrun": "node scripts/env/load.js ./.env.online.staging -- node scripts/ops/restore.dryrun.cjs",
    "ops:dlq:check": "node scripts/env/load.js ./.env.online.staging ./.env.tokens.staging -- node scripts/ops/dlq.check.cjs",
    "ops:jobs:check": "node scripts/env/load.js ./.env.online.staging -- node scripts/ops/jobs.check.cjs",
    "ops:admin:guard": "node scripts/env/load.js ./.env.online.staging ./.env.tokens.staging -- node scripts/ops/admin.guard.check.cjs",
    "ops:alerts:check": "node scripts/env/load.js ./.env.online.staging -- node scripts/ops/alerts.check.cjs",
    "ops:av:selftest": "node scripts/env/load.js ./.env.online.staging -- node scripts/ops/av.wrapper.cjs",
    "ops:go-live": "node scripts/ops/go-live.cjs",
    "staging:init": "node scripts/staging/init.cjs",
    "tokens:get:staging": "node scripts/tokens/get.cjs backend/.env.online.staging",
    "ops:all:staging": "npm run online:run-all",
    "postdeploy:prod": "node scripts/env/load.js ./.env.online.staging ./.env.tokens.staging -- node scripts/ops/go-live.cjs",
    "staging:oneclick": "npm run staging:init && npm run tokens:get:staging && npm run ops:all:staging",
    "staging:doctor": "npm -w backend run staging:oneclick",
    "online:payments": "node scripts/online/payments.check.cjs",
    "online:kyc": "node scripts/online/kyc.check.cjs",
    "online:run-all": "node scripts/online/run-all.cjs",
    "online:all": "node scripts/online/run-all.cjs",
    "online:all:local": "node scripts/env/load.js .env.online.local -- npm run ops:spawn && node scripts/env/load.js .env.online.local -- npm run ops:wait && node scripts/env/load.js .env.online.local -- npm run online:all && node scripts/env/load.js .env.online.local -- npm run ops:kill",
    "tokens:show:staging": "node -e \"console.log(process.env.ADMIN_BEARER_TOKEN, process.env.PROVIDER_BEARER_TOKEN)\"",
    "online:payments:staging": "node scripts/env/load.js ./.env.online.staging ./.env.tokens.staging -- npm run online:payments",
    "online:kyc:staging": "node scripts/env/load.js ./.env.online.staging ./.env.tokens.staging -- npm run online:kyc",
    "online:all:staging": "node scripts/env/load.js ./.env.online.staging ./.env.tokens.staging -- npm run online:all",
    "staging:postdeploy": "node scripts/env/load.js ./.env.online.staging ./.env.tokens.staging -- npm run postdeploy:staging",
    "postdeploy:staging": "node scripts/env/load.js ./.env.online.staging ./.env.tokens.staging -- npm run ops:wait && npm run ops:verify && npm run smoke:all",
    "postdeploy:staging:online": "node scripts/env/load.js ./.env.online.staging ./.env.tokens.staging -- npm run ops:wait && npm run online:all",
    "profiles:check:prod": "node scripts/env/require.prod.cjs",
    "ci:build": "npm run build",
    "ci:migrate": "node scripts/prisma/selfheal.cjs && npx prisma migrate deploy",
    "ci:seed:min": "node scripts/seed/min.cjs",
    "ci:postdeploy": "npm run postdeploy:prod",
    "demo:purge:prod": "node scripts/env/load.js -- node scripts/demo/purge.cjs",
    "ops:backup:now": "node scripts/env/load.js ./.env.online.staging -- node scripts/ops/backup.now.cjs",
    "e2e:optionB": "bash scripts/e2e-optionB.sh",
    "prisma:version": "npx prisma --version",
    "prisma:status": "node scripts/env/load.js ./.env ./.env.local -- prisma migrate status",
    "prisma:gen": "prisma generate",
    "prisma:push": "prisma db push",
    "prisma:migrate": "prisma migrate dev --name sync || prisma db push && prisma generate",
    "registry:diag": "node -e \"const {execSync}=require('child_process');try{console.log('npm get registry=',execSync('npm get registry').toString().trim());console.log('@prisma:registry=',execSync('npm config get @prisma:registry').toString().trim());execSync('npm view @prisma/engines version',{stdio:'inherit'});}catch(e){console.error('diag error:',e.message)}\"",
    "registry:prisma:mirror": "npm config set @prisma:registry https://registry.npmmirror.com/",
    "registry:show": "node tools/registry/show-registry.js",
    "registry:public": "node tools/registry/ensure-public-registry.js",
    "registry:auto": "node tools/registry/switch-registry.js",
    "build:clean": "node scripts/clean.js && tsc -b",
    "setup:auto": "npm run registry:auto && (npm ci || npm install) && npm run build",
    "setup:public": "npm run registry:public && (npm ci || npm install) && npm run build",
    "setup:mirror": "npm config set registry https://registry.npmmirror.com/ && npm config set @prisma:registry https://registry.npmmirror.com/ && npm config set strict-ssl true && (npm ci || npm install) && npm run build",
    "setup:windows": "npm run registry:public && npm ci || npm install",
    "setup:mac": "npm run registry:public && npm ci || npm install",
    "seed": "node scripts/env/load.js ./.env ./.env.local ./.env.sample.local -- ts-node --transpile-only prisma/seed/index.ts",
    "doctor": "npm run registry:show && node scripts/check-prisma.js",
    "tests:setup": "npm run registry:auto && (npm ci || npm install) && npm run test:prepare || (echo \"[tests] install bloquée → exécutez OFFLINE_SKIP_TESTS=true npm test\" && exit 0)",
    "tests:online": "node -e \"process.env.OFFLINE_SKIP_TESTS='false'; process.env.FORCE_ONLINE='true'; require('child_process').spawn('npm', ['run','test'], {stdio:'inherit', shell:true}).on('exit', c=>process.exit(c||0))\"",
    "compose:up": "docker compose up --build",
    "compose:down": "docker compose down -v",
    "db:backup": "node scripts/db/backup.js",
    "db:backup:cleanup": "node scripts/db/cleanup.js",
    "audit:ci": "node scripts/env/load.js ./.env -- node scripts/audit/full.cjs --ci",
    "ci:check": "node scripts/ci/check.js",
    "ci:check:local": "node scripts/env/init-online-local.js && node scripts/env/load.js .env.online.local -- npm run ops:spawn && node scripts/env/load.js .env.online.local -- npm run ops:wait && node scripts/env/load.js .env.online.local -- npm run ci:check && node scripts/env/load.js .env.online.local -- npm run ops:kill",
    "ci:check:staging": "node scripts/env/load.js .env.online.staging -- npm run ops:wait && node scripts/env/load.js .env.online.staging -- npm run ci:check",
    "ci:predeploy": "npm run audit:ci && npm run ops:go-live",
    "audit:schedule": "node scripts/ci/audit-schedule.cjs",
    "profiles:init:staging": "node -e \"const fs=require('fs');const p='.env.online.staging';if(fs.existsSync(p)){console.log('SKIPPED: '+p+' exists');process.exit(0)}fs.copyFileSync('.env.online.staging.example',p);console.log('CREATED '+p)\"",
    "profiles:check:staging": "node scripts/env/load.js ./.env.online.staging -- node scripts/env/require.cjs ./.env.online.staging",
    "tokens:get:staging:all": "node scripts/env/load.js ./.env.online.staging ./.env.tokens.staging -- node scripts/tokens/get.cjs",
    "setup:local": "node scripts/dev/install.cjs && npm run prisma:selfheal",
    "prisma:selfheal": "node scripts/prisma/selfheal.cjs",
    "env:prod": "node scripts/env/load.js backend/.env.production",
    "env:local": "node scripts/env/load.js backend/.env",
    "db:bootstrap": "node scripts/env/load.js backend/.env.production -- node scripts/db/bootstrap.cjs --allow-bootstrap",
    "audit:ci:legacy": "node scripts/audit-ci.js",
    "audit:full": "node scripts/env/load.js ./.env ./.env.local -- node scripts/audit/full.cjs",
    "audit:online": "node scripts/env/load.js ./.env.online.staging ./.env.tokens.staging -- node scripts/audit/full.cjs --online",
    "remediate": "node scripts/remediate/run.cjs",
    "profiles:dev:ensure": "node scripts/env/load.js ./.env -- node -e \"console.log('ENV OK')\"",
    "webhooks:check:secrets": "node scripts/env/load.js ./.env -- node -e \"console.log('stripe:', !!process.env.STRIPE_WEBHOOK_SECRET, 'identity:', !!process.env.STRIPE_IDENTITY_WEBHOOK_SECRET)\"",
    "remediate:p0": "node scripts/remediate/run.cjs --level=P0",
    "remediate:p1": "node scripts/remediate/run.cjs --level=P1 --quick",
    "verify:postfix": "npm run audit:full && node scripts/audit/print-last.cjs",
    "prisma:baseline": "node scripts/prisma/baseline.cjs",
    "prisma:webhookevent": "node scripts/prisma/webhookevent.cjs"
  },
  "dependencies": {
    "@prisma/client": "5.16.1",
    "bcryptjs": "^3.0.2",
    "cors": "^2.8.5",
    "express": "^4.21.2",
    "express-rate-limit": "^8.0.1",
    "helmet": "^8.1.0",
    "jsonwebtoken": "^9.0.2",
    "stripe": "^16.7.0",
    "winston": "^3.10.0",
    "redis": "^4.6.13",
    "zod": "^3.24.2",
    "node-cron": "^3.0.3"
  },
  "devDependencies": {
    "@types/jsonwebtoken": "^9.0.10",
    "prisma": "5.16.1",
    "jest": "^29.7.0",
    "ts-jest": "^29.1.1",
    "@types/jest": "^29.5.14",
    "supertest": "^6.3.4",
    "@types/supertest": "^2.0.16",
    "ts-node": "^10.9.2"
  },
  "prisma": {
    "seed": "ts-node --transpile-only prisma/seed/index.ts"
  }
}