{
  "name": "backend",
  "version": "1.0.0",
  "type": "commonjs",
  "main": "dist/server.js",
  "scripts": {
    "preinstall": "node -e \"console.log('npm registry:', process.env.npm_config_registry||'default')\"",
    "postinstall": "node -e \"try{require('fs').statSync('node_modules/@prisma/client')}catch(e){}\" && npx prisma generate || true",
    "prisma:self-heal": "node scripts/prisma/self-heal.js",
    "prisma:prepare:test": "node scripts/prisma/prepare-test-db.js",
    "predev": "npm run prisma:self-heal",
    "dev": "node scripts/run-dev.js",
    "dev:force-online": "node -e \"process.env.FORCE_ONLINE='true'; require('./scripts/run-dev')\"",
    "prestart": "npm run prisma:self-heal",
    "start": "node scripts/run-start.js",
    "build": "tsc -b",
    "run:env": "node scripts/run-with-env.js",
    "db:status": "npx prisma migrate status",
    "db:migrate": "npx prisma migrate dev --name init",
    "db:push": "npx prisma db push",
    "db:seed": "echo \"db seed not implemented\"",
    "db:generate": "npx prisma generate",
    "db:studio": "npx prisma studio",
    "db:test:reset": "prisma db push --force-reset --accept-data-loss",
    "db:bootstrap:pg": "node scripts/db-bootstrap-pg.js",
    "db:bootstrap:sqlite": "node scripts/db-bootstrap-sqlite.js",
    "db:seed:sql": "node scripts/db-seed-sql.js",
    "test:prepare": "node scripts/test-db-prepare.js",
    "pretest": "node scripts/prisma/self-heal.js && node scripts/prisma/prepare-test-db.js",
    "test": "node scripts/test/smart-runner.js",
    "test:smart": "node scripts/test/smart-runner.js",
    "test:ci": "node -e \"process.env.NODE_ENV='test'; process.env.OFFLINE_SKIP_TESTS='false'; require('child_process').spawn('npx', ['jest','--ci','--runInBand'], {stdio:'inherit', shell:true}).on('exit', c=>process.exit(c||0))\"",
    "test:watch": "jest --watch",
    "e2e:clubpro:curl": "node scripts/print-e2e-curls.js",
    "demo:e2e:curls": "node scripts/print-e2e-curls.js",
    "test:cov": "jest --coverage",
    "admin:create": "ts-node scripts/create-admin.ts",
    "demo:provision": "node scripts/demo-guard.js && node --loader ts-node/esm scripts/demo-provision.ts || node scripts/demo-provision.js",
    "demo:purge": "node scripts/demo-guard.js && node --loader ts-node/esm scripts/demo-purge.ts || node scripts/demo-purge.js",
    "demo:tokens": "node scripts/demo-guard.js && node scripts/demo-tokens.mjs",
    "vault:check": "ts-node scripts/check-vault.ts",
    "kyc:retention:run": "ts-node scripts/run-kyc-retention.ts",
    "smoke:webhooks": "node scripts/smoke/run.js scripts/smoke/webhooks.js",
    "smoke:search": "node scripts/smoke/run.js scripts/smoke/search.js",
    "smoke:pii": "node scripts/smoke/run.js scripts/smoke/pii.js",
    "smoke:metrics": "node scripts/smoke/run.js scripts/smoke/metrics.js",
    "smoke:prefs": "node scripts/smoke/run.js scripts/smoke/notif_prefs.js",
    "smoke:subs": "node scripts/smoke/run.js scripts/smoke/subscriptions.js",
    "smoke:i18n": "node scripts/smoke/run.js scripts/smoke/i18n.js",
    "smoke:cache": "node scripts/smoke/run-with-health.js scripts/smoke/cache.smoke.ts",
    "smoke:all": "npm run smoke:webhooks && npm run smoke:search && npm run smoke:pii && npm run smoke:metrics && npm run smoke:prefs && npm run smoke:subs && npm run smoke:i18n && npm run smoke:cache",
    "ops:wait": "node scripts/ops/wait-backend.js",
    "ops:spawn": "node scripts/ops/spawn-backend.js",
    "ops:kill": "node scripts/ops/kill-backend.js",
    "ops:csp-cors": "node scripts/ops/csp-cors.check.js",

    "online:payments": "node scripts/online/payments.check.js",
    "online:kyc": "node scripts/online/kyc.check.js",
    "online:all": "npm run online:payments && npm run online:kyc",

    "online:all:local": "node scripts/env/load.js .env.online.local -- npm run ops:spawn && node scripts/env/load.js .env.online.local -- npm run ops:wait && node scripts/env/load.js .env.online.local -- npm run online:all && node scripts/env/load.js .env.online.local -- npm run ops:kill",
    "online:all:staging": "node scripts/env/load.js .env.online.staging -- npm run ops:wait && node scripts/env/load.js .env.online.staging -- npm run online:all",
    "e2e:optionB": "bash scripts/e2e-optionB.sh",
    "prisma:version": "npx prisma --version",
    "prisma:generate": "npx prisma generate",
    "prisma:doctor": "node -e \"const {execSync}=require('child_process');try{execSync('npx prisma -v',{stdio:'inherit'});}catch(e){console.error('prisma doctor failed:',e.message);process.exit(1)}\"",
    "prisma:gen": "npx prisma generate",
    "prisma:migrate": "npx prisma migrate dev --name init_khadamat_db",
    "prisma:push": "npx prisma db push",
    "registry:diag": "node -e \"const {execSync}=require('child_process');try{console.log('npm get registry=',execSync('npm get registry').toString().trim());console.log('@prisma:registry=',execSync('npm config get @prisma:registry').toString().trim());execSync('npm view @prisma/engines version',{stdio:'inherit'});}catch(e){console.error('diag error:',e.message)}\"",
    "registry:prisma:mirror": "npm config set @prisma:registry https://registry.npmmirror.com/",
    "registry:show": "node tools/registry/show-registry.js",
    "registry:public": "node tools/registry/ensure-public-registry.js",
    "registry:auto": "node tools/registry/switch-registry.js",
    "build:clean": "node scripts/clean.js && tsc -b",
    "setup:auto": "npm run registry:auto && (npm ci || npm install) && npm run build",
    "setup:public": "npm run registry:public && (npm ci || npm install) && npm run build",
    "setup:mirror": "npm config set registry https://registry.npmmirror.com/ && npm config set @prisma:registry https://registry.npmmirror.com/ && npm config set strict-ssl true && (npm ci || npm install) && npm run build",
    "setup:windows": "npm run registry:public && npm ci || npm install",
    "setup:mac": "npm run registry:public && npm ci || npm install",
    "doctor": "npm run registry:show && node scripts/check-prisma.js",
    "tests:setup": "npm run registry:auto && (npm ci || npm install) && npm run test:prepare || (echo \"[tests] install bloquée → exécutez OFFLINE_SKIP_TESTS=true npm test\" && exit 0)",
    "tests:online": "node -e \"process.env.OFFLINE_SKIP_TESTS='false'; process.env.FORCE_ONLINE='true'; require('child_process').spawn('npm', ['run','test'], {stdio:'inherit', shell:true}).on('exit', c=>process.exit(c||0))\"",
    "compose:up": "docker compose up --build",
    "compose:down": "docker compose down -v",
    "db:backup": "node scripts/db/backup.js",
    "db:backup:cleanup": "node scripts/db/cleanup.js",
    "audit:ci": "node scripts/audit-ci.js",
    "ci:check": "node scripts/ci/check.js",
    "ci:check:local": "node scripts/env/init-online-local.js && node scripts/env/load.js .env.online.local -- npm run ops:spawn && node scripts/env/load.js .env.online.local -- npm run ops:wait && node scripts/env/load.js .env.online.local -- npm run ci:check && node scripts/env/load.js .env.online.local -- npm run ops:kill",
    "ci:check:staging": "node scripts/env/load.js .env.online.staging -- npm run ops:wait && node scripts/env/load.js .env.online.staging -- npm run ci:check"
  },
  "dependencies": {
    "@prisma/client": "5.16.1",
    "bcryptjs": "^3.0.2",
    "cors": "^2.8.5",
    "express": "^4.21.2",
    "express-rate-limit": "^8.0.1",
    "helmet": "^8.1.0",
    "jsonwebtoken": "^9.0.2",
    "stripe": "^16.7.0",
    "winston": "^3.10.0",
    "redis": "^4.6.13",
    "zod": "^3.24.2",
    "node-cron": "^3.0.3"
  },
  "devDependencies": {
    "@types/jsonwebtoken": "^9.0.10",
    "prisma": "5.16.1",
    "jest": "^29.7.0",
    "ts-jest": "^29.1.1",
    "@types/jest": "^29.5.14",
    "supertest": "^6.3.4",
    "@types/supertest": "^2.0.16",
    "ts-node": "^10.9.2"
  }
}
